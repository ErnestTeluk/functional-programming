{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"b5c91032-42be-5770-a4fe-80b91a9c5492","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = nightOwl;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Factory Functions, functor, monad\")), mdx(\"h1\", null, \"Hello \\uD83D\\uDC4B\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Functional programming in JavaScript, what are Factory Functions, functors and monads.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Abour Me\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ernest Teluk\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"FullStack developer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MERN Stack + typescript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I like playing the drums\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I have a cat named gibciu \\u2764\\uFE0F\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class PieceOfCake {\\n  bake() {}\\n  decorate() {}\\n  cut() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class PieceOfCake {\\n  bake() {}\\n  decorate() {}\\n  cut() {}\\n}\\n\\nclass Muffin {\\n  bake() {}\\n  decorate() {}\\n  heatUp() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"It would be useful to use the principle of Don't Repeat Yourself\\\" showNumbers 1:11\",\n    \"title\": \"\\\"It\",\n    \"would\": true,\n    \"be\": true,\n    \"useful\": true,\n    \"to\": true,\n    \"use\": true,\n    \"the\": true,\n    \"principle\": true,\n    \"of\": true,\n    \"Don't\": true,\n    \"Repeat\": true,\n    \"Yourself\\\"\": true,\n    \"showNumbers\": true,\n    \"1:11\": true\n  }, \"class PieceOfCake {\\n  bake() {}\\n  decorate() {}\\n  cut() {}\\n}\\n\\nclass Muffin {\\n  bake() {}\\n  decorate() {}\\n  heatUp() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 1:4\",\n    \"showNumbers\": true,\n    \"1:4\": true\n  }, \"class Baking {\\n  bake() {}\\n  decorate() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"inheritance\\\" showNumbers\",\n    \"title\": \"\\\"inheritance\\\"\",\n    \"showNumbers\": true\n  }, \"class Baking {\\n  bake() {}\\n  decorate() {}\\n}\\n\\nclass PieceOfCake extends Baking {\\n  cut() {}\\n}\\n\\nclass Muffin extends Baking {\\n  heatUp() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class Baking {\\n  bake() {}\\n  decorate() {}\\n}\\n\\nclass PieceOfCake extends Baking {\\n  cut() {}\\n}\\n\\nclass Muffin extends Baking {\\n  heatUp() {}\\n}\\n\\nclass Salad {\\n  mixed() {}\\n  decorate() {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"The Duplication by Necessity Problem\\\" showNumbers 1:17\",\n    \"title\": \"\\\"The\",\n    \"Duplication\": true,\n    \"by\": true,\n    \"Necessity\": true,\n    \"Problem\\\"\": true,\n    \"showNumbers\": true,\n    \"1:17\": true\n  }, \"class Baking {\\n  bake() {}\\n  decorate() {}\\n}\\n\\nclass PieceOfCake extends Baking {\\n  cut() {}\\n}\\n\\nclass Muffin extends Baking {\\n  heatUp() {}\\n}\\n\\nclass Salad {\\n  mixed() {}\\n  decorate() {}\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Factory Function\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"A factory function is any function that is not a class or constructor that returns a (possibly new) object\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Composition\\\" showNumbers\",\n    \"title\": \"\\\"Composition\\\"\",\n    \"showNumbers\": true\n  }, \"const bakable = (state) => ({\\n  bake: () => console.log(`baking new ${state.type}`),\\n});\\n\\nconst decorable = (state) => ({\\n  decorate: () => console.log(`decorating new ${state.name}`),\\n});\\n\\nconst cutable = (state) => ({\\n  cut: () => console.log(`cuting new ${state.name}`),\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Factory Function\\\" showNumbers\",\n    \"title\": \"\\\"Factory\",\n    \"Function\\\"\": true,\n    \"showNumbers\": true\n  }, \"const bakable = (state) => ({\\n  bake: () => console.log(`baking new ${state.type}`),\\n});\\n\\nconst decorable = (state) => ({\\n  decorate: () => console.log(`decorating new ${state.name}`),\\n});\\n\\nconst cutable = (state) => ({\\n  cut: () => console.log(`cuting new ${state.name}`),\\n});\\n\\nconst pieceOfCake = (name, type) => {\\n  const state = { name, type };\\n\\n  return Object.assign({}, bakable(state), decorable(state), cutable(state));\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Factory Function\\\" showNumbers\",\n    \"title\": \"\\\"Factory\",\n    \"Function\\\"\": true,\n    \"showNumbers\": true\n  }, \"const bakable = (state) => ({\\n  bake: () => console.log(`baking new ${state.type}`),\\n});\\n\\nconst decorable = (state) => ({\\n  decorate: () => console.log(`decorating new ${state.name}`),\\n});\\n\\nconst cutable = (state) => ({\\n  cut: () => console.log(`cuting new ${state.name}`),\\n});\\n\\nconst pieceOfCake = (name, type) => {\\n  const state = { name, type };\\n\\n  return Object.assign({}, bakable(state), decorable(state), cutable(state));\\n};\\n\\nconst newPiece = pieceOfCake('chocolate cake', 'cake');\\nnewPiece.bake();\\nnewPiece.decorate();\\nnewPiece.cut();\\n\")))), mdx(\"hr\", null), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/1.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n\\n  getItems() {\\n    return this.items;\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n\\n  getItems() {\\n    return this.items;\\n  }\\n}\\n\\nconst numbers = new List()\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n\\n  getItems() {\\n    return this.items;\\n  }\\n}\\n\\nconst numbers = new List()\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n\\n  getItems() {\\n    return this.items;\\n  }\\n}\\n\\nconst numbers = new List()\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems();\\nnumbers.items;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"class List {\\n  items = []\\n\\n  addItem(item) {\\n    this.items.push(item)\\n  }\\n\\n  getItems() {\\n    return this.items;\\n  }\\n}\\n\\nconst numbers = new List()\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems();\\nnumbers.items;\\n\\nconst button = document.querySelector('button');\\nbutton.addEventListener('click', numbers.getItems) // undefined\\nbutton.addEventListener('click', numbers.getItems.bind(this)) // [1,2]\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No encapsulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Problematic keyword this\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const list = () => {\\n  const items = [];\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const list = () => {\\n  const items = [];\\n\\n  return {\\n    addItem: (item) => items.push(item),\\n    getItems: () => items,\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const list = () => {\\n  const items = [];\\n\\n  return {\\n    addItem: (item) => items.push(item),\\n    getItems: () => items,\\n  }\\n}\\n\\nconst numbers = list();\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems(); // [1,2]\\nnumbers.items; // undefined\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const list = () => {\\n  const items = [];\\n\\n  return {\\n    addItem: (item) => items.push(item),\\n    getItems: () => items,\\n  }\\n}\\n\\nconst numbers = list();\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems(); // [1,2]\\nnumbers.items; // undefined\\nnumbers.addItem = '';\\nnumbers.addItem(3) // numbers.addItem is not a function\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const list = () => {\\n  const items = [];\\n\\n  return Object.freeze({\\n    addItem: (item) => items.push(item),\\n    getItems: () => items,\\n  })\\n}\\n\\nconst numbers = list();\\nnumbers.addItem(1);\\nnumbers.addItem(2);\\nnumbers.getItems(); // [1,2]\\nnumbers.items; // undefined\\nnumbers.addItem = '';\\nnumbers.addItem(3)\\nnumbers.getItems() // [1,2,3]\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Warning\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Due to the convergence of the \", mdx(\"mark\", null, \"concept presented\"), \" with the array methods in \", mdx(\"mark\", null, \"vanila js\"), \", I will present a comparison of the  \", mdx(\"strong\", null, \"map\"), \" and \", mdx(\"strong\", null, \"flatMap\"), \" functions\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Map\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"In vanila js on an \", mdx(\"mark\", null, \"type Array\"), \", the function \", mdx(\"strong\", null, \".map\"), \" can be called, consequently obtaining again an \", mdx(\"mark\", null, \"type Array\"), \" with new content.\"), mdx(\"hr\", null), mdx(\"h1\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"A strong analogy in the case of functors:\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"In the concept under discussion, in \", mdx(\"mark\", null, \"function X\"), \", the function \", mdx(\"strong\", null, \".map\"), \" can be called, consequently obtaining again instances of \", mdx(\"mark\", null, \"function X\"), \" with new content.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"flatMap in vanila js\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"In vanila js on a \", mdx(\"mark\", null, \"type Array\"), \" the function \", mdx(\"strong\", null, \".flatMap\"), \" can be called, consequently obtaining a \", mdx(\"mark\", null, \"table\"), \" from which each element has been flattened; subject to flattening.\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: theme,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  Array.prototype.flatMap = function(callback = () => {}) {\\n    return this.map(item => callback(item).flat()).flat()\\n  }\\n\"))), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"The important thing is that we again get the \", mdx(\"mark\", null, \"Array\"), \" type, which has the same methods.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"flatMap in functors\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"In the concept discussed here, in \", mdx(\"mark\", null, \"function X\"), \", the function \", mdx(\"strong\", null, \".flatMap\"), \" can be called, which will close the literal, so the result is a \", mdx(\"mark\", null, \"simpler type.\"), \".\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"We can no longer call the methods of a given functor on such a result.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Object in context\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Array(a)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable(b)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Promise(c)\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Functors\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"A data structure on which you can map functions to take values from a container, modify them and then put them back into the container.\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"functor\\\" showNumbers\",\n    \"title\": \"\\\"functor\\\"\",\n    \"showNumbers\": true\n  }, \"const array = [1,2,3,4];\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"functor\\\" showNumbers\",\n    \"title\": \"\\\"functor\\\"\",\n    \"showNumbers\": true\n  }, \"const array = [1,2,3,4];\\nconst addOne = (value) => value + 1;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"functor\\\" showNumbers\",\n    \"title\": \"\\\"functor\\\"\",\n    \"showNumbers\": true\n  }, \"const array = [1,2,3,4];\\nconst addOne = (value) => value + 1;\\nconst arrayMap = array.map(addOne);\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"#1 Indentity\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: theme,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const sameArray = array.map((v) => v);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"#2 Composition\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \" const double = (value) => value * 2;\\n const triple = (value) => value * 3;\\n\\n const composition = array.map((v) => triple(double(v)));\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \" const double = (value) => value * 2;\\n const triple = (value) => value * 3;\\n\\n const composition = array.map((v) => triple(double(v)));\\n const chaining = array.map((v) => double(v)).map((v) => triple(v));\\n\")))), mdx(\"hr\", null), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/2.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"How create a functor\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\\n  const functor = (v) => ({})\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\\n  const functor = (v) => ({\\n    map: (fn) => functor(fn(v)),\\n  })\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\\n  const functor = (v) => ({\\n    map: (fn) => functor(fn(v)),\\n    valueOf: () => v,\\n  })\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\\n  const functor = (v) => ({\\n    map: (fn) => functor(fn(v)),\\n    valueOf: () => v,\\n  })\\n\\n  const number = functor(2);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"  const double = (value) => value * 2;\\n  const triple = (value) => value * 3;\\n\\n  const functor = (v) => ({\\n    map: (fn) => functor(fn(v)),\\n    valueOf: () => v,\\n  })\\n\\n  const number = functor(2);\\n  console.log(\\\"functor\\\", number.map(double).map(triple).valueOf());\\n\")))), mdx(\"hr\", null), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/3.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Monad\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"A way of composing functions that require context in addition to the return value\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Monad example\\\" showNumbers\",\n    \"title\": \"\\\"Monad\",\n    \"example\\\"\": true,\n    \"showNumbers\": true\n  }, \"  [1, 2, 3, 4].flatMap((v) => [v * 2])\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Monad example\\\" showNumbers\",\n    \"title\": \"\\\"Monad\",\n    \"example\\\"\": true,\n    \"showNumbers\": true\n  }, \"  [1, 2, 3, 4].flatMap((v) => [v * 2])\\n\\n  const promise = new Promise((res) => setTimeout(() => res(\\\"done\\\"), 500));\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Monad example\\\" showNumbers\",\n    \"title\": \"\\\"Monad\",\n    \"example\\\"\": true,\n    \"showNumbers\": true\n  }, \"  [1, 2, 3, 4].flatMap((v) => [v * 2])\\n\\n  const promise = new Promise((res) => setTimeout(() => res(\\\"done\\\"), 500));\\n  promise.then((data) => console.log(data));\\n\")))), mdx(\"hr\", null), mdx(\"h1\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"How the promise actually works\"), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const promise = new Promise((res) => setTimeout(() => res(\\\"done\\\"), 500));\\npromise.then((data) => console.log(data))\\n\"))), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Promise(Promise('done')) in the calback of these functions we have access to the value of the\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const promise2 = promise.then((data) => data).then((data) => console.log(data));\\nconsole.log(\\\"this is promise\\\", Object.prototype.toString.call(promise2));\\n\"))), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/4.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Promise(Promise('done')) -> Promise('done') = flat map\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Own monady example\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Function to convert degrees Fahrenheit to Celsius\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const fahrenheitToCelcius = (a) => (a - 32) * 0.5556;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const fahrenheitToCelcius = (a) => (a - 32) * 0.5556;\\n\\nconst value1 = 15;\\nconst value2 = null;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const fahrenheitToCelcius = (a) => (a - 32) * 0.5556;\\n\\nconst value1 = 15;\\nconst value2 = null;\\n\\nconsole.log(\\\"good\\\", fahrenheitToCelcius(value1));\\nconsole.log(\\\"bad\\\", fahrenheitToCelcius(value2));\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"A problem arises\"), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/5.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"All because null is converted to 0\"), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"We need something to stop the composition if the value is null\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    theme: theme,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const just = (v) => ({\\n  map: (fn) => just(fn(v)),\\n  flatMap: (fn) => fn(v),\\n  valueOf: () => v,\\n  inspect: () => `just(${v})`,\\n  type: \\\"just\\\",\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const just = (v) => ({\\n  map: (fn) => just(fn(v)),\\n  flatMap: (fn) => fn(v),\\n  valueOf: () => v,\\n  inspect: () => `just(${v})`,\\n  type: \\\"just\\\",\\n});\\n\\nconst nothing = () => ({\\n  map: (fn) => nothing(fn()),\\n  flatMap: (fn) => fn(),\\n  valueOf: () => nothing(),\\n  inspect: () => `nothing()`,\\n  type: \\\"nothing\\\",\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const just = (v) => ({\\n  map: (fn) => just(fn(v)),\\n  flatMap: (fn) => fn(v),\\n  valueOf: () => v,\\n  inspect: () => `just(${v})`,\\n  type: \\\"just\\\",\\n});\\n\\nconst nothing = () => ({\\n  map: (fn) => nothing(fn()),\\n  flatMap: (fn) => fn(),\\n  valueOf: () => nothing(),\\n  inspect: () => `nothing()`,\\n  type: \\\"nothing\\\",\\n});\\n\\nconst maybeOf = (x) => (x == null || x.type === \\\"nothing\\\" ? nothing() : just(x));\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const just = (v) => ({\\n  map: (fn) => just(fn(v)),\\n  flatMap: (fn) => fn(v),\\n  valueOf: () => v,\\n  inspect: () => `just(${v})`,\\n  type: \\\"just\\\",\\n});\\n\\nconst nothing = () => ({\\n  map: (fn) => nothing(fn()),\\n  flatMap: (fn) => fn(),\\n  valueOf: () => nothing(),\\n  inspect: () => `nothing()`,\\n  type: \\\"nothing\\\",\\n});\\n\\nconst maybeOf = (x) => (x == null || x.type === \\\"nothing\\\" ? nothing() : just(x));\\n\\nconst maybe = {\\n  of: maybeOf,\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"const just = (v) => ({\\n  map: (fn) => just(fn(v)),\\n  flatMap: (fn) => fn(v),\\n  valueOf: () => v,\\n  inspect: () => `just(${v})`,\\n  type: \\\"just\\\",\\n});\\n\\nconst nothing = () => ({\\n  map: (fn) => nothing(fn()),\\n  flatMap: (fn) => fn(),\\n  valueOf: () => nothing(),\\n  inspect: () => `nothing()`,\\n  type: \\\"nothing\\\",\\n});\\n\\nconst maybeOf = (x) => (x == null|| x.type === \\\"nothing\\\" ? nothing() : just(x));\\n\\nconst maybe = {\\n  of: maybeOf,\\n};\\n\\nconst temp1 = maybe.of(value1).map(fahrenheitToCelcius).inspect();\\nconst temp2 = maybe.of(value2).map(fahrenheitToCelcius).map(double).inspect();\\nconsole.log(temp1);\\nconsole.log(temp2);\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Now both results are correct\"), mdx(Image, {\n    src: \"https://raw.githubusercontent.com/ErnestTeluk/functional-programming/main/images/6.png\",\n    style: {\n      \"backgroundImage\": \"contain\",\n      \"backgroundSize\": \"800px auto\"\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Questions? \\uD83D\\uDE00\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"b5c91032-42be-5770-a4fe-80b91a9c5492","slug":"/functional-programming","title":"Hello 👋"}},"staticQueryHashes":[]}